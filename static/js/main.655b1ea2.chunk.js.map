{"version":3,"sources":["LineGraph.js","util.js","Mapk.js","Table.js","InfoBox.js","Navbar.js","App.js","serviceWorker.js","index.js"],"names":["options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","props","useState","setData","buildChartData","lastDataPoint","chartData","date","cases","newDataPoint","x","y","push","useEffect","a","fetch","then","response","json","fetchData","className","length","datasets","backgroundColor","borderColor","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","sortedData","sort","b","prettyPrintStat","stat","Mapk","countries","center","zoom","Map","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","color","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","InfoBox","title","active","total","isRed","Card","onClick","CardContent","Typography","useStyles","makeStyles","theme","root","flexGrow","ButtonAppBar","classes","AppBar","background","position","Toolbar","variant","marginLeft","App","setCountry","setcountries","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","onChange","MenuItem","isRe","d","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.655b1ea2.chunk.js","sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport {Line} from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options={\r\n    legend:{\r\n        display:false,\r\n    },\r\n    elements:{\r\n        point:{\r\n            radius:0,\r\n        },\r\n    },\r\n    maintainAspectRatio:false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect:false,\r\n        callbacks:{\r\n            label:function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales:{\r\n        xAxes:[\r\n            {\r\n            type: \"time\",\r\n            time:{\r\n                format:\"MM/DD/YY\",\r\n                tooltipFormat:\"ll\",\r\n            },\r\n        },\r\n        ],\r\n        yAxes:[\r\n            {\r\n                gridLines:{\r\n                    display:false,\r\n                },\r\n                ticks:{\r\n                    callback: function(value,index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nfunction LineGraph({casesType=\"cases\", ...props}) {\r\n    const [data , setData]=useState({});\r\n\r\n    const buildChartData=(data, casesType=\"cases\") => {\r\n        const chartData=[];\r\n        let lastDataPoint;\r\n        \r\n        for(let date in data.cases){\r\n            if(lastDataPoint){\r\n                const newDataPoint = {\r\n                    x: date,\r\n                    y: data[casesType][date] - lastDataPoint,\r\n                };\r\n                chartData.push(newDataPoint);\r\n            }\r\n            lastDataPoint = data[casesType][date];\r\n        }\r\n        return chartData;\r\n      };\r\n    useEffect(()=> {\r\n      const fetchData = async () =>{\r\n        await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=180\")\r\n        .then((response) => response.json())\r\n        .then((data) =>{\r\n           const chartData=buildChartData(data,casesType);\r\n           setData(chartData);\r\n\r\n        });\r\n      };\r\n      fetchData();\r\n    }, [casesType]);\r\n   \r\n    return (\r\n        <div className={props.className}>\r\n\r\n           {data?.length> 0 &&(\r\n            <Line\r\n            options={options}\r\n             data={{\r\n                 datasets:[\r\n                     {\r\n                         backgroundColor:\" #4747d1\",\r\n                         borderColor: \"#ff1a75\",\r\n                         data:data\r\n                     },\r\n                 ],\r\n             }}\r\n         />\r\n\r\n           )}\r\n         \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport {Circle,Popup} from \"react-leaflet\";\r\n\r\nconst casesTypeColors={\r\n    cases:{\r\n        hex:\"#CC1034\",\r\n        rgb:\"rgb(204,16,52)\",\r\n        half_op:\"rgba(204,16,52,0.5)\",\r\n        multiplier:800,\r\n    },\r\n    recovered:{\r\n        hex: \"#7dd71d\",\r\n        rgb: \"rgb(125,215,29)\",\r\n        half_op: \"rgba(125,215,29,0.5)\",\r\n        multiplier:1200\r\n    },\r\n    deaths:{\r\n        hex: \"#fb4443\",\r\n        rgb: \"rgb(251,68,67)\",\r\n        half_op: \"rgba(251,68,67,0.5)\",\r\n        multiplier:2000\r\n    },\r\n};\r\nexport const sortData=(data) =>{\r\n    const sortedData =[...data];\r\n    \r\n    sortedData.sort((a,b)=>{\r\n        \r\n        \r\n        if(a.cases>b.cases){\r\n            return -1;\r\n        } else{\r\n            return 1;\r\n        }\r\n    })\r\n    return sortedData;\r\n};\r\nexport const prettyPrintStat= (stat) => stat ? `+${numeral(stat).format(\"0.0a\")}` :\"+0\"; \r\nexport const showDataOnMap = (data , casesType=\"cases\") => (\r\n    data.map((country) =>(\r\n        <Circle\r\n        center={[country.countryInfo.lat,country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        radius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier }\r\n        >\r\n        <Popup>\r\n            <div className=\"info-container\">\r\n                <div className=\"info-flag\" style={{backgroundImage:`url(${country.countryInfo.flag})`}}/>\r\n                <div className=\"info-name\">{country.country} </div>\r\n                <div className=\"info-cases\">Cases:{numeral(country.cases).format(\"0,0\")}</div>\r\n                <div className=\"info-recovered\">Recovered:{numeral(country.recovered).format(\"0,0\")}</div>\r\n                <div className=\"info-deaths\">Deaths:{numeral(country.deaths).format(\"0,0\")}</div>\r\n            </div>\r\n        </Popup>\r\n\r\n        </Circle>\r\n\r\n    ))\r\n);","import React from 'react'\r\nimport {Map ,TileLayer} from \"react-leaflet\";\r\nimport \"./Mapk.css\"\r\nimport {showDataOnMap} from \"./util\";\r\nfunction Mapk({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <Map center={center} zoom={zoom}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution='&copy; <a href=\"http://osm.org/copyright\"> OpenStreetMap</a> contributors'/>\r\n                {showDataOnMap(countries,casesType)}\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mapk;\r\n","import React from 'react'\r\nimport './Table.css';\r\nimport numeral from \"numeral\";\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n        {countries.map(({country, cases}) =>(\r\n            <tr>\r\n                <td>{country}</td>\r\n                <td> <strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n            </tr>\r\n        ))}\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n ","import React from 'react'\r\nimport \"./InfoBox.css\"\r\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\r\nfunction InfoBox({title,cases,active,isRed,total, ...props}) {\r\n    return (\r\n        <Card onClick={props.onClick} className={`infoBox ${active && \"infoBox--selected\"}` }>\r\n            <CardContent>\r\n                <Typography className=\"infoBox_title\" color=\"textPrimary\">\r\n                  <strong>{title}</strong>  \r\n                </Typography>\r\n                <h2 className=\"infoBox_cases\" >{cases}</h2>\r\n                <Typography className=\"infoBox_total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n   \r\n  },\r\n \r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nexport default function ButtonAppBar() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar style={{ background: '#d24dff' }} position=\"static\">\r\n        <Toolbar>\r\n          \r\n          <Typography variant=\"h6\" className={classes.title}>\r\n           <h2 style={{marginLeft:\"30px\"}}>CM CHANDAN  </h2> \r\n          \r\n          </Typography>\r\n         \r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport LineGraph from \"./LineGraph\"\nimport { Card, CardContent, Typography } from \"@material-ui/core\"\nimport Mapk from \"./Mapk\"\nimport \"leaflet/dist/leaflet.css\";\nimport Table from \"./Table\"\nimport InfoBox from \"./InfoBox\";\nimport { Select, MenuItem, FormControl } from \"@material-ui/core\"\nimport { sortData,prettyPrintStat } from './util';\nimport ButtonAppBar from \"./Navbar\"\nimport MenuIcon from '@material-ui/icons/Menu';\nfunction App() {\n\n  const [country, setCountry] = useState(\"Worldwide\");\n  const [countries, setcountries] = useState([]);\n  const [countryInfo,setCountryInfo]=useState({});\n  const [tableData,setTableData]=useState([]);\n  const [mapCenter,setMapCenter]=useState({lat:34.80746,lng:-40.4796})\n  const [mapZoom,setMapZoom]=useState(3);\n  const [mapCountries,setMapCountries]=useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() =>{\n     fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => setCountryInfo(data))\n  },[])\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => (\n            {\n              name: country.country,\n              value: country.countryInfo.iso2\n            }\n          ));\n          const sortedData=sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data)\n          setcountries(countries);\n        })\n    }\n    getCountriesData();\n  }, []);\n\n\n  const onCountryChange= async (event) =>{\n  const countryCode=event.target.value;\n  setCountry(countryCode);\n  console.log(countryCode)\n  const url = countryCode==='Worldwide' ? \"https://disease.sh/v3/covid-19/all\" : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n  await fetch(url)\n  .then(response => response.json())\n  .then(data =>{\n    setCountry(countryCode);\n    setCountryInfo(data);\n    setMapCenter([data.countryInfo.lat,data.countryInfo.long]);\n    setMapZoom(4);\n\n  })\n  };\n \n  \n  return (\n    <div>\n\n    <ButtonAppBar/>\n\n    <div className=\"App\">\n   \n      <div className=\"app_left\">\n        <div className=\"app_header\">\n          <h1> COVID-19 TRACKER</h1>\n          \n          <FormControl className=\"app_dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"Worldwide\">Worldwide </MenuItem>\n              {\n                countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))\n              }\n\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app_stats\">\n          <InfoBox isRe d active={casesType===\"cases\"} onClick={(e) =>setCasesType(\"cases\")} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          <InfoBox active={casesType===\"recovered\"} onClick={(e) =>setCasesType(\"recovered\")} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          <InfoBox isRed active={casesType===\"deaths\"} onClick={(e) =>setCasesType(\"deaths\")} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n\n        </div>\n        <Mapk\n        casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom}/>\n      </div>\n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live Cases by Country</h3>\n          <Table countries={tableData}/>\n          <h3 className=\"app_graphTitle\">Worldwide new {casesType}</h3>\n          <LineGraph className=\"app_graph\" casesType={casesType}/>\n        </CardContent>\n\n      </Card>\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}